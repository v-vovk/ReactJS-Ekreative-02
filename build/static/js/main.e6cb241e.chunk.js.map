{"version":3,"sources":["components/AppHeaderLink/AppHeaderLink.js","components/AppHeader/AppHeader.js","components/AppHero/AppHero.js","components/AppFeaturesItem/AppFeaturesItem.js","components/AppFeatures/AppFeatures.js","App.js","serviceWorker.js","index.js"],"names":["AppHeaderLink","label","active","style","color","fontWeight","href","AppHeader","elements","links","map","link","id","linkProps","key","className","src","alt","AppHero","content","title","description","AppFeaturesItem","imgLink","AppFeatures","item","other","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAeeA,G,KAbO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACxBC,EAAQ,CACZC,MAAOF,EAAS,YAAc,QAC9BG,WAAYH,EAAS,OAAS,UAGhC,OACE,uBAAGI,KAAK,IAAIH,MAAOA,GAChBF,KCmBQM,EAzBG,SAAC,GAAe,IAC1BC,EADyB,EAAZC,MACIC,KAAI,SAAAC,GAAS,IAC1BC,EAAqBD,EAArBC,GAAOC,EADkB,YACJF,EADI,QAGjC,OACE,wBAAIG,IAAKF,EAAIG,UAAU,wBACrB,kBAAC,EAAkBF,OAKzB,OACE,4BAAQE,UAAU,cAChB,yBAAKA,UAAU,aACb,yBACEC,IAA8B,YAC9BD,UAAU,kBACVE,IAAI,UAEN,wBAAIF,UAAU,mBAAmBP,MCF1BU,G,MAlBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,6BAASJ,UAAU,YACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mBAAmBI,EAAQC,OACzC,uBAAGL,UAAU,yBAAyBI,EAAQE,aAC9C,uBAAGf,KAAK,IAAIS,UAAU,iBAAtB,mBCEGO,G,YAVS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASH,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzC,OACE,yBAAKN,UAAU,yBACb,yBAAKA,UAAU,8BAA8BC,IAAKO,EAASN,IAAKG,IAChE,wBAAIL,UAAU,gCAAgCK,GAC9C,uBAAGL,UAAU,sCAAsCM,MCS1CG,EAbK,SAAC,GAAiB,IAC9BhB,EAD6B,EAAdW,QACIT,KAAI,SAAAe,GAAS,IAC5Bb,EAAiBa,EAAjBb,GAAOc,EADoB,YACVD,EADU,QAEnC,OAAO,kBAAC,EAAD,iBAAqBC,EAArB,CAA4BZ,IAAKF,QAG1C,OACE,6BAASG,UAAU,gBACjB,yBAAKA,UAAU,aAAaP,KCkEnBmB,MAzEf,WAgEE,OACE,oCACE,kBAAC,EAAD,CAAWlB,MAjEG,CAChB,CACER,MAAO,aACPC,QAAQ,EACRU,GAAI,GAEN,CACEX,MAAO,UACPC,QAAQ,EACRU,GAAI,GAEN,CACEX,MAAO,UACPC,QAAQ,EACRU,GAAI,GAEN,CACEX,MAAO,UACPC,QAAQ,EACRU,GAAI,GAEN,CACEX,MAAO,UACPC,QAAQ,EACRU,GAAI,GAEN,CACEX,MAAO,WACPC,QAAQ,EACRU,GAAI,MAqCJ,kBAAC,EAAD,CAASO,QAjCO,CAClBC,MAAO,mBACPC,YACE,yEA+BA,kBAAC,EAAD,CAAaF,QA5BO,CACtB,CACEP,GAAI,EACJW,QAAkC,kBAClCH,MAAO,cACPC,YACE,6SAEJ,CACET,GAAI,EACJW,QAAkC,kBAClCH,MAAO,6CACPC,YACE,qPAEJ,CACET,GAAI,EACJW,QAAkC,kBAClCH,MAAO,oBACPC,YACE,6ICrDYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6cb241e.chunk.js","sourcesContent":["import React from 'react'\n\nconst AppHeaderLink = ({ label, active }) => {\n  const style = {\n    color: active ? 'steelblue' : 'black',\n    fontWeight: active ? 'bold' : 'normal'\n  }\n\n  return (\n    <a href='#' style={style}>\n      {label}\n    </a>\n  )\n}\n\nexport default AppHeaderLink\n","import React from 'react'\nimport './AppHeader.scss'\nimport AppHeaderLink from '../AppHeaderLink/AppHeaderLink'\n\nconst AppHeader = ({ links }) => {\n  const elements = links.map(link => {\n    const { id, ...linkProps } = link\n\n    return (\n      <li key={id} className='app-header-list-item'>\n        <AppHeaderLink {...linkProps} />\n      </li>\n    )\n  })\n\n  return (\n    <header className='app-header'>\n      <div className='container'>\n        <img\n          src={process.env.PUBLIC_URL + '/logo.svg'}\n          className='app-header-logo'\n          alt='lorem'\n        />\n        <ul className='app-header-list'>{elements}</ul>\n      </div>\n    </header>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\nimport './AppHero.scss'\n\nconst AppHero = ({ content }) => {\n  return (\n    <section className='app-hero'>\n      <div className='container'>\n        <div className='row d-flex justify-content-center'>\n          <div className='col-md-6 content'>\n            <h1 className='app-hero__title'>{content.title}</h1>\n            <p className='app-hero__description'>{content.description}</p>\n            <a href='#' className='app-hero__btn'>\n              Order now\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default AppHero\n","import React from 'react'\nimport './AppFeaturesItem.scss'\n\nconst AppFeaturesItem = ({ imgLink, title, description }) => {\n  return (\n    <div className='row app-features-item'>\n      <img className='col-md-12 app-features__img' src={imgLink} alt={title} />\n      <h2 className='col-md-4 app-features__title'>{title}</h2>\n      <p className='col-md-8 app-features__description'>{description}</p>\n    </div>\n  )\n}\n\nexport default AppFeaturesItem\n","import React from 'react'\nimport './AppFeatures.scss'\nimport AppFeaturesItem from './../AppFeaturesItem/AppFeaturesItem'\n\nconst AppFeatures = ({ content }) => {\n  const elements = content.map(item => {\n    const { id, ...other } = item\n    return <AppFeaturesItem {...other} key={id} />\n  })\n\n  return (\n    <section className='app-features'>\n      <div className='container'>{elements}</div>\n    </section>\n  )\n}\n\nexport default AppFeatures\n","import React from 'react'\nimport AppHeader from './components/AppHeader/AppHeader'\nimport AppHero from './components/AppHero/AppHero'\nimport AppFeatures from './components/AppFeatures/AppFeatures'\n\nfunction App() {\n  const menuItems = [\n    {\n      label: 'CYBERTRUCK',\n      active: true,\n      id: 1\n    },\n    {\n      label: 'MODEL S',\n      active: false,\n      id: 2\n    },\n    {\n      label: 'MODEL 3',\n      active: false,\n      id: 3\n    },\n    {\n      label: 'MODEL X',\n      active: false,\n      id: 4\n    },\n    {\n      label: 'MODEL Y',\n      active: false,\n      id: 5\n    },\n    {\n      label: 'ROADSTER',\n      active: false,\n      id: 6\n    }\n  ]\n\n  const heroContent = {\n    title: 'Tesla Cybertruck',\n    description:\n      'BETTER UTILITY THAN A TRUCK WITH MORE PERFORMANCE THAN A SPORTS CAR'\n  }\n\n  const featuresContent = [\n    {\n      id: 1,\n      imgLink: process.env.PUBLIC_URL + '/02_Desktop.jpg',\n      title: 'EXOSKELETON',\n      description:\n        'Cybertruck is built with an exterior shell made for ultimate durability and passenger protection. Starting with a nearly impenetrable exoskeleton, every component is designed for superior strength and endurance, from Ultra-Hard 30X Cold-Rolled stainless-steel structural skin to Tesla armor glass.'\n    },\n    {\n      id: 2,\n      imgLink: process.env.PUBLIC_URL + '/03_Desktop.jpg',\n      title: 'ULTRA-HARD 30X COLD-ROLLED STAINLESS STEEL',\n      description:\n        'If there was something better, weâ€™d use it. Help eliminate dents, damage and long-term corrosion with a smooth monochrome exoskeleton that puts the shell on the outside of the car and provides you and your passengers maximum protection.'\n    },\n    {\n      id: 3,\n      imgLink: process.env.PUBLIC_URL + '/04_Desktop.jpg',\n      title: 'TESLA ARMOR GLASS',\n      description:\n        'Ultra-strong glass and polymer-layered composite can absorb and redirect impact force for improved performance and damage tolerance.'\n    }\n  ]\n\n  return (\n    <>\n      <AppHeader links={menuItems} />\n      <AppHero content={heroContent} />\n      <AppFeatures content={featuresContent} />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}